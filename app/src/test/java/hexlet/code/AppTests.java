package hexlet.code;

import hexlet.code.model.Url;
import hexlet.code.repository.UrlCheckRepository;
import hexlet.code.repository.UrlRepository;
import io.javalin.Javalin;
import io.javalin.testtools.JavalinTest;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.AfterEach;


import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class AppTests {
    private Javalin app;
    private UrlRepository urlRepository;
    private UrlCheckRepository urlCheckRepository;
    private MockWebServer mockWebServer;

    @BeforeAll
    void setUpApp() throws SQLException, IOException {
        app = App.getApp();
        urlRepository = new UrlRepository(DataSourceConfig.getDataSource());
        urlCheckRepository = new UrlCheckRepository(DataSourceConfig.getDataSource());

        // Инициализация MockWebServer
        mockWebServer = new MockWebServer();
        mockWebServer.start();

        // Инициализация таблиц
        try (var conn = DataSourceConfig.getDataSource().getConnection();
             var stmt = conn.createStatement()) {
            stmt.execute(
                    "CREATE TABLE IF NOT EXISTS page_analyzer ("
                            + "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                            + "name VARCHAR(255) NOT NULL, "
                            + "created_at TIMESTAMP NOT NULL);"
                            + "CREATE TABLE IF NOT EXISTS url_checks ("
                            + "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                            + "url_id BIGINT REFERENCES page_analyzer(id) ON DELETE CASCADE, "
                            + "status_code INTEGER, "
                            + "title VARCHAR(255), "
                            + "h1 VARCHAR(255), "
                            + "description TEXT, "
                            + "created_at TIMESTAMP);"
            );
        }
    }

    @AfterAll
    void tearDownApp() throws IOException {
        app.stop();
        mockWebServer.shutdown();
    }

    @BeforeEach
    void setUp() throws SQLException {
        try (var conn = DataSourceConfig.getDataSource().getConnection();
             var stmt = conn.createStatement()) {
            stmt.execute("SET REFERENTIAL_INTEGRITY FALSE");
            stmt.execute("TRUNCATE TABLE url_checks RESTART IDENTITY");
            stmt.execute("TRUNCATE TABLE page_analyzer RESTART IDENTITY");
            stmt.execute("SET REFERENTIAL_INTEGRITY TRUE");
        }
        try {
            app = App.getApp();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @AfterEach
    void tearDown() {
        app.stop();
    }

    @Test
    void testGetMainPage() {
        JavalinTest.test(app, (server, client) -> {
            var response = client.get("/");
            assertThat(response.code()).isEqualTo(200);
            assertThat(response.body().string()).contains("URL Analyzer");
        });
    }

    @Test
    void testPostUrlValid() {
        JavalinTest.test(app, (server, client) -> {
            OkHttpClient noRedirectClient = new OkHttpClient.Builder()
                    .followRedirects(false)
                    .followSslRedirects(false)
                    .build();

            String url = "http://localhost:" + server.port() + "/urls";
            var requestBody = "url=" + URLEncoder.encode("https://example.com", StandardCharsets.UTF_8);
            var request = new Request.Builder()
                    .url(url)
                    .post(RequestBody.create(requestBody, MediaType.parse("application/x-www-form-urlencoded")))
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .header("Content-Length", String.valueOf(requestBody.length()))
                    .build();
            var response = noRedirectClient.newCall(request).execute();

            assertThat(response.code()).isEqualTo(302);
            assertThat(response.header("Location")).isEqualTo("/urls");

            // Следуем за редиректом
            var redirectResponse = client.get("/urls");
            assertThat(redirectResponse.code()).isEqualTo(200);

            var urls = urlRepository.findAll();
            assertThat(urls).hasSize(1);
            assertThat(urls.get(0).getName()).isEqualTo("https://example.com");
        });
    }

    @Test
    void testPostUrlInvalid() {
        JavalinTest.test(app, (server, client) -> {
            OkHttpClient noRedirectClient = new OkHttpClient.Builder()
                    .followRedirects(false)
                    .followSslRedirects(false)
                    .build();

            String url = "http://localhost:" + server.port() + "/urls";
            var requestBody = "url=" + URLEncoder.encode("", StandardCharsets.UTF_8);
            var request = new Request.Builder()
                    .url(url)
                    .post(RequestBody.create(requestBody, MediaType.parse("application/x-www-form-urlencoded")))
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .header("Content-Length", String.valueOf(requestBody.length()))
                    .build();
            var response = noRedirectClient.newCall(request).execute();

            assertThat(response.code()).isEqualTo(302);
            assertThat(response.header("Location")).isEqualTo("/");

            // Проверяем главную страницу
            var redirectResponse = client.get("/");
            assertThat(redirectResponse.code()).isEqualTo(200);

            var urls = urlRepository.findAll();
            assertThat(urls).isEmpty();
        });
    }

    @Test
    void testPostUrlDuplicate() {
        JavalinTest.test(app, (server, client) -> {
            OkHttpClient noRedirectClient = new OkHttpClient.Builder()
                    .followRedirects(false)
                    .followSslRedirects(false)
                    .build();

            String url = "http://localhost:" + server.port() + "/urls";
            var requestBody = "url=" + URLEncoder.encode("https://example.com", StandardCharsets.UTF_8);
            var firstRequest = new Request.Builder()
                    .url(url)
                    .post(RequestBody.create(requestBody, MediaType.parse("application/x-www-form-urlencoded")))
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .header("Content-Length", String.valueOf(requestBody.length()))
                    .build();
            var firstResponse = noRedirectClient.newCall(firstRequest).execute();
            assertThat(firstResponse.code()).isEqualTo(302);
            assertThat(firstResponse.header("Location")).isEqualTo("/urls");

            var urlsAfterFirst = urlRepository.findAll();
            assertThat(urlsAfterFirst).hasSize(1);
            assertThat(urlsAfterFirst.get(0).getName()).isEqualTo("https://example.com");

            var secondRequest = new Request.Builder()
                    .url(url)
                    .post(RequestBody.create(requestBody, MediaType.parse("application/x-www-form-urlencoded")))
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .header("Content-Length", String.valueOf(requestBody.length()))
                    .build();
            var secondResponse = noRedirectClient.newCall(secondRequest).execute();
            assertThat(secondResponse.code()).isEqualTo(302);
            assertThat(secondResponse.header("Location")).isEqualTo("/urls");

            // Проверяем страницу
            var redirectResponse = client.get("/urls");
            assertThat(redirectResponse.code()).isEqualTo(200);

            var urlsAfterSecond = urlRepository.findAll();
            assertThat(urlsAfterSecond).hasSize(1);
            assertThat(urlsAfterSecond.get(0).getName()).isEqualTo("https://example.com");
        });
    }

    @Test
    void testGetUrlsPage() throws SQLException {
        JavalinTest.test(app, (server, client) -> {
            var url = new Url("https://test.com", Timestamp.from(Instant.now()));
            urlRepository.save(url);

            var response = client.get("/urls");
            assertThat(response.code()).isEqualTo(200);
            assertThat(response.body().string()).contains("https://test.com");
        });
    }

    @Test
    void testGetUrlById() throws SQLException {
        JavalinTest.test(app, (server, client) -> {
            var url = new Url("https://detail.com", Timestamp.from(Instant.now()));
            urlRepository.save(url);

            var response = client.get("/urls/" + url.getId());
            assertThat(response.code()).isEqualTo(200);
            assertThat(response.body().string()).contains("https://detail.com");
        });
    }

    @Test
    void testGetUrlNotFound() {
        JavalinTest.test(app, (server, client) -> {
            OkHttpClient noRedirectClient = new OkHttpClient.Builder()
                    .followRedirects(false)
                    .followSslRedirects(false)
                    .build();

            var response = noRedirectClient.newCall(new Request.Builder()
                    .url("http://localhost:" + server.port() + "/urls/999")
                    .build()).execute();
            assertThat(response.code()).isEqualTo(302);
            assertThat(response.header("Location")).isEqualTo("/urls");

            // Проверяем страницу
            var redirectResponse = client.get("/urls");
            assertThat(redirectResponse.code()).isEqualTo(200);
        });
    }

    @Test
    void testCreateCheckSuccess() throws SQLException {
        var url = new Url(mockWebServer.url("/").toString(), Timestamp.from(Instant.now()));
        urlRepository.save(url);

        String html = """
        <html>
        <head>
            <title>Test Title</title>
            <meta name="description" content="Test Description">
        </head>
        <body>
            <h1>Test H1</h1>
        </body>
        </html>
            """;

        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody(html));

        JavalinTest.test(app, (server, client) -> {
            OkHttpClient noRedirectClient = new OkHttpClient.Builder()
                    .followRedirects(false)
                    .followSslRedirects(false)
                    .build();
            var response = noRedirectClient.newCall(new Request.Builder()
                    .url("http://localhost:" + server.port() + "/urls/" + url.getId() + "/checks")
                    .post(RequestBody.create("", MediaType.parse("application/x-www-form-urlencoded")))
                    .build()).execute();
            assertThat(response.code()).isEqualTo(302);
            assertThat(response.header("Location")).isEqualTo("/urls/" + url.getId());

            // Проверяем страницу
            var redirectResponse = client.get("/urls/" + url.getId());
            assertThat(redirectResponse.code()).isEqualTo(200);

            var checks = urlCheckRepository.findByUrlId(url.getId());
            assertThat(checks).hasSize(1);

            var check = checks.get(0);
            assertThat(check.getStatusCode()).isEqualTo(200);
            assertThat(check.getTitle()).isEqualTo("Test Title");
            assertThat(check.getH1()).isEqualTo("Test H1");
            assertThat(check.getDescription()).isEqualTo("Test Description");
            assertThat(check.getUrlId()).isEqualTo(url.getId());
            assertThat(check.getCreatedAt()).isNotNull();
        });
    }

//    @Test
//    void testCreateCheckFailure() throws SQLException {
//        var url = new Url("https://nonexistent.com", Timestamp.from(Instant.now()));
//        urlRepository.save(url);
//
//        JavalinTest.test(app, (server, client) -> {
//            OkHttpClient noRedirectClient = new OkHttpClient.Builder()
//                    .followRedirects(false)
//                    .followSslRedirects(false)
//                    .build();
//            var response = noRedirectClient.newCall(new Request.Builder()
//                    .url("http://localhost:" + server.port() + "/urls/" + url.getId() + "/checks")
//                    .post(RequestBody.create("", MediaType.parse("application/x-www-form-urlencoded")))
//                    .build()).execute();
//            assertThat(response.code()).isEqualTo(302);
//            assertThat(response.header("Location")).isEqualTo("/urls/" + url.getId());
//
//            // Проверяем страницу
//            var redirectResponse = client.get("/urls/" + url.getId());
//            assertThat(redirectResponse.code()).isEqualTo(200);
//
//            var checks = urlCheckRepository.findByUrlId(url.getId());
//            assertThat(checks).isEmpty();
//        });
//    }
}
